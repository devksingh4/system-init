---
- name: Install and Configure macOS
  hosts: localhost
  connection: local
  become: false

  vars_prompt:
    - name: ansible_become_pass
      prompt: "Enter your macOS user password (for sudo)"
      private: true

  vars:
    upgrade_homebrew_packages: true

    # ==> Package Lists
    brew_packages:
      - gs
      - pdfgrep
      - mas
      - nano
      - wget
      - gnupg
      - pinentry-mac
      - mise
      - aws-sam-cli
      - python
      - cfn-lint
      - git
      - ffmpeg
      - zsh
      - pipx
      - graphviz
      - dockutil
      - nvm
      - miniconda
      - gh
      - tailscale

    brew_cask_packages:
      - eternal-dissident/tap/logi-options-offline
      - discord
      - spotify
      - visual-studio-code
      - firefox
      - docker
      - google-chrome
      - google-drive
      - alt-tab
      - betterdisplay
      - rectangle
      - cyberduck
      - hoppscotch
      - basictex
      - zoom
      - raycast
      - messenger
      - slack
      - microsoft-office
      - notunes
      - mongodb-compass
      - pgadmin4
      - bitwarden

    mas_packages:
      - { name: "Notability", id: 360593530 }

    pip_packages:
      - numpy
      - matplotlib
      - pandas
      - scipy
      - scikit-learn
      - pytest
      - seaborn

    # ==> Git Repositories
    github_cloned_repos:
      - { org: "devksingh4", repo: "system-init" }
      - { org: "acm-uiuc", repo: "website" }
      - { org: "acm-uiuc", repo: "core" }

    # ==> Dock Configuration
    dockitems_to_add:
      - "/System/Library/CoreServices/Finder.app"
      - "/Applications/Firefox.app"
      - "/Applications/Spotify.app"
      - "/Applications/Slack.app"
      - "/Applications/Discord.app"
      - "/Applications/Visual Studio Code.app"
      - "/Applications/Messages.app"
      - "/System/Applications/Photos.app"
      - "/System/Applications/Utilities/Terminal.app"
      - "/Applications/zoom.us.app"

  pre_tasks:
    - name: Check if Homebrew is installed
      stat:
        path: /opt/homebrew/bin/brew
      register: homebrew_check

    - name: Update Homebrew repositories
      community.general.homebrew:
        update_homebrew: true
      when: homebrew_check.stat.exists

  tasks:
    - name: Upgrade all Homebrew packages
      community.general.homebrew:
        upgrade_all: "{{ upgrade_homebrew_packages }}"
      when: homebrew_check.stat.exists

    # ==> Package Installations (with verbose output)
    - name: Install Homebrew packages
      community.general.homebrew:
        name: "{{ brew_packages }}"
        state: present
      register: brew_install_result
    

    - name: Install Homebrew Cask packages
      community.general.homebrew_cask:
        name: "{{ brew_cask_packages }}"
        sudo_password: "{{ ansible_become_pass }}"
        state: present
      register: cask_install_result

    - name: Install Mac App Store packages
      loop: "{{ mas_packages }}"
      community.general.mas:
        id: "{{ item.id }}"
        state: present

    - name: Install Pip packages
      ansible.builtin.pip:
        name: "{{ item }}"
        state: present
      loop: "{{ pip_packages }}"

    # ==> System and Application Configuration
    - name: Create .ssh directory
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.ssh"
        state: directory
        mode: '0700'

    - name: Template .ssh/config
      ansible.builtin.template:
        src: files/ssh_config.j2
        dest: "{{ ansible_env.HOME }}/.ssh/config"
        mode: '0600'

    - name: Create Rectangle config directory
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/Library/Application Support/Rectangle"
        state: directory

    - name: Template Rectangle config
      ansible.builtin.template:
        src: files/RectangleConfig.json
        dest: "{{ ansible_env.HOME }}/Library/Application Support/Rectangle/RectangleConfig.json"
      ignore_errors: true

    - name: Install Oh My Zsh
      ansible.builtin.shell:
        cmd: sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
        creates: "{{ ansible_env.HOME }}/.oh-my-zsh"
      changed_when: true

    - name: Template .zshrc
      ansible.builtin.template:
        src: files/.zshrc
        dest: "{{ ansible_env.HOME }}/.zshrc"

    # ==> macOS Defaults Configuration
    - name: Configure macOS defaults
      community.general.osx_defaults:
        domain: "{{ item.domain }}"
        key: "{{ item.key }}"
        type: "{{ item.type }}"
        value: "{{ item.value }}"
        state: present
      loop:
        - { domain: 'NSGlobalDomain', key: 'NSAutomaticSpellingCorrectionEnabled', type: 'bool', value: false }
        - { domain: 'NSGlobalDomain', key: 'NSAutomaticPeriodSubstitutionEnabled', type: 'bool', value: false }
        - { domain: 'com.apple.finder', key: 'FXEnableExtensionChangeWarning', type: 'bool', value: false }
        - { domain: 'com.apple.desktopservices', key: 'DSDontWriteNetworkStores', type: 'bool', value: true }
        - { domain: 'com.apple.dock', key: 'wvous-br-corner', type: 'int', value: 0 }
        - { domain: 'com.apple.dock', key: 'autohide-time-modifier', type: 'float', value: 0.3 }
        - { domain: 'com.apple.dock', key: 'autohide', type: 'bool', value: true }
        - { domain: 'com.apple.dock', key: 'tilesize', type: 'int', value: 48 }
        - { domain: 'com.apple.finder', key: 'FXDefaultSearchScope', type: 'string', value: 'SCcf' }
        - { domain: 'NSGlobalDomain', key: 'NSDocumentSaveNewDocumentsToCloud', type: 'bool', value: false }
        - { domain: 'digital.twisted.noTunes', key: 'replacement', type: 'string', value: '/Applications/Spotify.app' }

    # ==> Dock Management
    - name: Clear all items from the Dock
      community.general.dockutil:
        state: "absent"
        path: "*"
      notify: Restart Dock

    - name: Add items to the Dock
      community.general.dockutil:
        path: "{{ item }}"
        state: "present"
      loop: "{{ dockitems_to_add }}"
      notify: Restart Dock

    # ==> Git Repository Cloning
    - name: Create source directory for Git repos
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/source/{{ item.org }}"
        state: directory
      loop: "{{ github_cloned_repos }}"

    - name: Clone specified Git repositories
      ansible.builtin.git:
        repo: "https://github.com/{{ item.org }}/{{ item.repo }}.git"
        dest: "{{ ansible_env.HOME }}/source/{{ item.org }}/{{ item.repo }}"
        clone: yes
        update: yes
      loop: "{{ github_cloned_repos }}"
      ignore_errors: true

  handlers:
    - name: Restart Dock
      ansible.builtin.command: killall Dock
      become: true
